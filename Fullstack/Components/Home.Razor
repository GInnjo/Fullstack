@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Fullstack.Models
@using MongoDB.Bson
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@implements IAsyncDisposable

<h3>Chat</h3>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message.Item1</li>
        <p>@message.Item2</p>
    }
</ul>

@code {

    private HubConnection? hubConnection;
    private List<(string, string)> messages = new List<(string, string)>();
    private string? userInput;
    private string? messageInput;
    private string userId;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedUser = $"{user}";
            var encodedMsg = $"{message}";
            messages.Add((encodedUser, encodedMsg));
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            string user_name = DatabaseHandler.GetById<User>(ObjectId.Parse(userId)).Username;
            await hubConnection.SendAsync("SendMessage", user_name, messageInput);
        }
    }
    
    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }


}